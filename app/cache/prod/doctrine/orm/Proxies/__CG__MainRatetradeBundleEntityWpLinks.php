<?php

namespace Proxies\__CG__\Main\RatetradeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WpLinks extends \Main\RatetradeBundle\Entity\WpLinks implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkUrl', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkName', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkImage', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkTarget', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkDescription', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkVisible', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkOwner', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRating', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkUpdated', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRel', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkNotes', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRss', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkId');
        }

        return array('__isInitialized__', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkUrl', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkName', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkImage', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkTarget', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkDescription', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkVisible', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkOwner', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRating', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkUpdated', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRel', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkNotes', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkRss', '' . "\0" . 'Main\\RatetradeBundle\\Entity\\WpLinks' . "\0" . 'linkId');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WpLinks $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setLinkUrl($linkUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkUrl', array($linkUrl));

        return parent::setLinkUrl($linkUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkUrl', array());

        return parent::getLinkUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkName($linkName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkName', array($linkName));

        return parent::setLinkName($linkName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkName', array());

        return parent::getLinkName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkImage($linkImage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkImage', array($linkImage));

        return parent::setLinkImage($linkImage);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkImage', array());

        return parent::getLinkImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkTarget($linkTarget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkTarget', array($linkTarget));

        return parent::setLinkTarget($linkTarget);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkTarget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkTarget', array());

        return parent::getLinkTarget();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkDescription($linkDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkDescription', array($linkDescription));

        return parent::setLinkDescription($linkDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkDescription', array());

        return parent::getLinkDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkVisible($linkVisible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkVisible', array($linkVisible));

        return parent::setLinkVisible($linkVisible);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkVisible', array());

        return parent::getLinkVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkOwner($linkOwner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkOwner', array($linkOwner));

        return parent::setLinkOwner($linkOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkOwner', array());

        return parent::getLinkOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkRating($linkRating)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkRating', array($linkRating));

        return parent::setLinkRating($linkRating);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkRating()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkRating', array());

        return parent::getLinkRating();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkUpdated($linkUpdated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkUpdated', array($linkUpdated));

        return parent::setLinkUpdated($linkUpdated);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkUpdated', array());

        return parent::getLinkUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkRel($linkRel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkRel', array($linkRel));

        return parent::setLinkRel($linkRel);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkRel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkRel', array());

        return parent::getLinkRel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkNotes($linkNotes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkNotes', array($linkNotes));

        return parent::setLinkNotes($linkNotes);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkNotes', array());

        return parent::getLinkNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkRss($linkRss)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkRss', array($linkRss));

        return parent::setLinkRss($linkRss);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkRss()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkRss', array());

        return parent::getLinkRss();
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getLinkId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkId', array());

        return parent::getLinkId();
    }

}
